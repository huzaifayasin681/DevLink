// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  username           String?   @unique
  bio                String?
  location           String?
  website            String?
  github             String?
  twitter            String?
  linkedin           String?
  skills             String[]  @default([])
  isAvailableForWork Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]
  posts    BlogPost[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  content      String
  imageUrl     String?
  liveUrl      String?
  githubUrl    String?
  technologies String[] @default([])
  featured     Boolean  @default(false)
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  excerpt     String
  slug        String   @unique
  published   Boolean  @default(false)
  tags        String[] @default([])
  imageUrl    String?
  readingTime Int      @default(1)
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}