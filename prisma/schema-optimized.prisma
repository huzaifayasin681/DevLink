// OPTIMIZED Prisma Schema with Indexes
// Replace your current schema.prisma with this file after review

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  
  role               String    @default("client")
  approved           Boolean   @default(false)
  isAdmin            Boolean   @default(false)
  
  username           String?   @unique
  bio                String?
  location           String?
  website            String?
  github             String?
  twitter            String?
  linkedin           String?
  skills             String[]  @default([])
  isAvailableForWork Boolean   @default(false)
  hourlyRate         Float?
  availableHours     String[]  @default([])
  profileViews       Int       @default(0)
  
  companyName        String?
  phoneNumber        String?
  address            String?
  industry           String?
  
  emailNotifications Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  projects    Project[]
  posts       BlogPost[]
  likes       Like[]
  comments    Comment[]
  followers   Follow[]  @relation("UserFollowers")
  following   Follow[]  @relation("UserFollowing")
  profileViewLogs ProfileView[] @relation("ProfileOwner")
  viewedProfiles ProfileView[] @relation("ProfileViewer")
  reviews     Review[]  @relation("UserReviews")
  reviewsGiven Review[] @relation("UserReviewsGiven")
  endorsementsReceived Endorsement[] @relation("UserEndorsements")
  endorsementsGiven Endorsement[] @relation("EndorsementGiver")
  testimonialsReceived Testimonial[] @relation("UserTestimonials")
  testimonialsGiven Testimonial[] @relation("TestimonialGiver")
  services    Service[]
  messagesSent Message[] @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")
  collaborationRequestsSent CollaborationRequest[] @relation("RequestSender")
  collaborationRequestsReceived CollaborationRequest[] @relation("RequestReceiver")
  serviceRequests ServiceRequest[] @relation("ClientRequests")
  assignedRequests ServiceRequest[] @relation("DeveloperAssignments")

  @@index([username])
  @@index([email])
  @@index([role])
  @@index([isAvailableForWork])
  @@index([createdAt])
  @@index([skills])
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
  @@map("verification_tokens")
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  content      String
  imageUrl     String?
  liveUrl      String?
  githubUrl    String?
  technologies String[] @default([])
  featured     Boolean  @default(false)
  likesCount   Int      @default(0)
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
  serviceRequest ServiceRequest[]

  @@index([userId])
  @@index([featured])
  @@index([createdAt])
  @@index([technologies])
  @@map("projects")
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  excerpt     String
  slug        String   @unique
  published   Boolean  @default(false)
  tags        String[] @default([])
  imageUrl    String?
  readingTime Int      @default(1)
  likesCount  Int      @default(0)
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]

  @@index([userId])
  @@index([published])
  @@index([createdAt])
  @@index([tags])
  @@index([slug])
  @@map("blog_posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  projectId String?  @db.ObjectId
  postId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post    BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], name: "user_project_like")
  @@unique([userId, postId], name: "user_post_like")
  @@index([userId])
  @@index([projectId])
  @@index([postId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  projectId String?  @db.ObjectId
  postId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  post    BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([postId])
  @@index([createdAt])
  @@map("comments")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], name: "user_follow")
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model ProfileView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  viewerId  String?  @db.ObjectId
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user   User  @relation("ProfileOwner", fields: [userId], references: [id], onDelete: Cascade)
  viewer User? @relation("ProfileViewer", fields: [viewerId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([viewerId])
  @@index([createdAt])
  @@map("profile_views")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userId    String   @db.ObjectId
  reviewerId String  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  reviewer User @relation("UserReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewerId], name: "user_reviewer")
  @@index([userId])
  @@index([reviewerId])
  @@index([rating])
  @@map("reviews")
}

model Endorsement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  skill     String
  userId    String   @db.ObjectId
  endorserId String  @db.ObjectId
  createdAt DateTime @default(now())

  user     User @relation("UserEndorsements", fields: [userId], references: [id], onDelete: Cascade)
  endorser User @relation("EndorsementGiver", fields: [endorserId], references: [id], onDelete: Cascade)

  @@unique([userId, endorserId, skill], name: "user_endorser_skill")
  @@index([userId])
  @@index([endorserId])
  @@index([skill])
  @@map("endorsements")
}

model Testimonial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  relationship String
  companyName String?
  position    String?
  approved    Boolean  @default(false)
  userId      String   @db.ObjectId
  authorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User @relation("UserTestimonials", fields: [userId], references: [id], onDelete: Cascade)
  author User @relation("TestimonialGiver", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([authorId])
  @@index([approved])
  @@map("testimonials")
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  pricing     String
  minPrice    Float?
  maxPrice    Float?
  duration    String?
  active      Boolean  @default(true)
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([active])
  @@index([category])
  @@map("services")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  subject    String?
  read       Boolean  @default(false)
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([read])
  @@index([createdAt])
  @@map("messages")
}

model CollaborationRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  projectType String
  budget      String?
  timeline    String?
  status      String   @default("pending")
  senderId    String   @db.ObjectId
  receiverId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender   User @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("collaboration_requests")
}

model ServiceRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  budget      String?
  timeline    String?
  status      String   @default("pending")
  priority    String   @default("medium")
  attachments String[] @default([])
  notes       String?
  
  clientId    String   @db.ObjectId
  assignedTo  String?  @db.ObjectId
  projectId   String?  @db.ObjectId
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client     User     @relation("ClientRequests", fields: [clientId], references: [id], onDelete: Cascade)
  developer  User?    @relation("DeveloperAssignments", fields: [assignedTo], references: [id], onDelete: SetNull)
  project    Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([clientId])
  @@index([assignedTo])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
  @@map("service_requests")
}
